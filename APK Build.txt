‚úÖ Step-by-Step Guide to Generate APK from Expo Project
1. Install EAS CLI (Expo Application Services)
bash
Copy
Edit
npm install -g eas-cli
2. Login to Expo
bash
Copy
Edit
eas login
3. Configure EAS in Your Project
If you haven't already:

bash
Copy
Edit
eas build:configure
This creates an eas.json file in your project.

4. Build APK for Android
To generate a development build (APK) for testing:

bash
Copy
Edit
eas build --platform android --profile preview
Or to create a production APK (universal):

bash
Copy
Edit
eas build --platform android --profile production
üîß Optional: Add custom build profiles in eas.json:

json
Copy
Edit
{
  "build": {
    "preview": {
      "distribution": "internal",
      "android": {
        "buildType": "apk"
      }
    },
    "production": {
      "distribution": "store",
      "android": {
        "buildType": "apk"
      }
    }
  }
}
5. Wait for the Build
EAS will show a link to the build page. You can also check status with:

bash
Copy
Edit
eas build:list
6. Download the APK
Once the build is done, download the .apk from the provided URL.

‚úÖ Notes
APKs generated by EAS can be universal APKs, which means they work on most Android devices.

For publishing to Play Store, you might prefer AAB (Android App Bundle) instead.

bash
Copy
Edit
eas build --platform android --profile production



Great! Here's how you can automate Expo APK builds and optionally prepare for Play Store upload using scripts and EAS CLI.

‚úÖ 1. Script for APK Build Automation
You can add this script in your package.json under "scripts":

json
Copy
Edit
"scripts": {
  "build:apk": "eas build --platform android --profile apk"
}
And then in your terminal:

bash
Copy
Edit
npm run build:apk
Also define the apk profile in eas.json:

json
Copy
Edit
{
  "build": {
    "apk": {
      "android": {
        "buildType": "apk"
      },
      "distribution": "internal"
    }
  }
}
This creates a universal APK for sideloading or testing.

‚úÖ 2. Script for AAB (Play Store) Build
If you want to upload to the Play Store, use AAB:

json
Copy
Edit
"scripts": {
  "build:aab": "eas build --platform android --profile production"
}
And in your eas.json:

json
Copy
Edit
{
  "build": {
    "production": {
      "android": {
        "buildType": "aab"
      },
      "distribution": "store"
    }
  }
}
Command to run:

bash
Copy
Edit
npm run build:aab
‚úÖ 3. Automated Upload to Play Store (Optional)
Expo does not directly upload to the Play Store, but you can use Fastlane for that:

Setup Fastlane:
bash
Copy
Edit
npm install -g fastlane
cd android
fastlane init
Follow the prompts for Play Store setup.

Sample Fastlane script (android/fastlane/Fastfile):
ruby
Copy
Edit
default_platform(:android)

platform :android do
  desc "Deploy to Play Store"
  lane :deploy do
    upload_to_play_store(
      aab: "../your-project-path/app-release.aab"
    )
  end
end
Run:

bash
Copy
Edit
fastlane deploy
‚úÖ Tips for Smooth Building
Always commit your code before triggering EAS builds.

Use .easignore like .gitignore to skip large files from upload.

Set environment variables (e.g. API keys) via eas.json or EAS dashboard.

‚ùì Want a local APK build without EAS?
If you want to build an APK without EAS (bare workflow), you‚Äôll need to eject:

bash
Copy
Edit
npx expo prebuild
Then open the Android folder in Android Studio and build APK manually ‚Äî but this is not recommended unless necessary.
